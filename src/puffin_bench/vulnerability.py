from puffin_bench.puffin import Fuzzer, Puffin


class Vulnerability:
    def __init__(self, vuln_id, name=None, cve=None) -> None:
        self._vuln_id = vuln_id
        self._name = name
        self._cve = cve

    def vuln_id(self):
        return self._vuln_id

    def name(self):
        return self._name if self._name else self._vuln_id

    def cve_name(self) -> str:
        return f"CVE-{self._cve}" if self._cve else ""

    def cve_url(self) -> str:
        return f"https://nvd.nist.gov/vuln/detail/{self.cve_name()}" if self._cve else ""

    def __repr__(self) -> str:
        return f"{self.__class__!s}({self.__dict__!r})"

    def build(self, puffin: Puffin) -> Fuzzer:
        import subprocess
        from uuid import uuid4

        target_dir = f"target-{uuid4()}"
        cargo_flags: list[str] = []
        exec_flags: list[str] = []

        if self.vuln_id() == "SDOS1":
            cargo_flags = ["--features=openssl111j"]
        elif self.vuln_id() == "SIG":
            cargo_flags = ["--features=wolfssl510,fix-CVE-2022-25640,fix-CVE-2022-39173"]
        elif self.vuln_id() == "SKIP":
            cargo_flags = ["--features=wolfssl510,fix-CVE-2022-25638,fix-CVE-2022-39173"]
        elif self.vuln_id() == "SDOS2":
            cargo_flags = ["--features=wolfssl540,wolfssl-disable-postauth,fix-CVE-2022-39173"]
            exec_flags = ["--put-use-clear"]
        elif self.vuln_id() == "CDOS":
            cargo_flags = ["--features=wolfssl530,fix-CVE-2022-39173"]
        elif self.vuln_id() == "BUF":
            cargo_flags = ["--features=wolfssl540,fix-CVE-2022-42905"]
        elif self.vuln_id() == "HEAP":
            cargo_flags = ["--features=wolfssl540,asan,fix-CVE-2022-39173"]
        else:
            raise RuntimeError(f"Cannot build vulnerability {self.vuln_id()}")

        cmd = " ".join(
            [
                "cargo",
                "build",
                "--release",
                "--package=tlspuffin",
                f"--target-dir={target_dir}",
                *cargo_flags,
            ]
        )

        subprocess.run(
            ["nix-shell", "--run", f"exec {cmd}"],
            cwd=puffin.repo,
            check=True,
        )

        return Fuzzer(
            puffin=puffin,
            binary=puffin.repo / target_dir / "release" / "tlspuffin",
            args=exec_flags,
        )
